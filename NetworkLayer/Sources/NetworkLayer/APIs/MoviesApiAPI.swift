//
// MoviesApiAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MoviesApiAPI {

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIAwardsApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AwardData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIAwardsApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Awards/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<AwardData> 
     */
    open class func aPIAwardsApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<AwardData> {
        var localVariablePath = "/API/Awards/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AwardData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIBoxOfficeAllTimeApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BoxOfficeAllTimeData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIBoxOfficeAllTimeApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/BoxOfficeAllTime/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<BoxOfficeAllTimeData> 
     */
    open class func aPIBoxOfficeAllTimeApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<BoxOfficeAllTimeData> {
        var localVariablePath = "/API/BoxOfficeAllTime/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BoxOfficeAllTimeData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIBoxOfficeApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BoxOfficeWeekendData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIBoxOfficeApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/BoxOffice/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<BoxOfficeWeekendData> 
     */
    open class func aPIBoxOfficeApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<BoxOfficeWeekendData> {
        var localVariablePath = "/API/BoxOffice/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BoxOfficeWeekendData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIComingSoonApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewMovieData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIComingSoonApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/ComingSoon/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<NewMovieData> 
     */
    open class func aPIComingSoonApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<NewMovieData> {
        var localVariablePath = "/API/ComingSoon/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewMovieData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPICompanyApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CompanyData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPICompanyApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Company/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<CompanyData> 
     */
    open class func aPICompanyApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<CompanyData> {
        var localVariablePath = "/API/Company/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CompanyData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIExternalSitesApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ExternalSiteData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIExternalSitesApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/ExternalSites/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ExternalSiteData> 
     */
    open class func aPIExternalSitesApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<ExternalSiteData> {
        var localVariablePath = "/API/ExternalSites/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalSiteData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIFAQApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FAQData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIFAQApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/FAQ/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<FAQData> 
     */
    open class func aPIFAQApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<FAQData> {
        var localVariablePath = "/API/FAQ/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FAQData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIFullCastApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FullCastData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIFullCastApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/FullCast/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<FullCastData> 
     */
    open class func aPIFullCastApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<FullCastData> {
        var localVariablePath = "/API/FullCast/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FullCastData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIIMDbListApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IMDbListData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIIMDbListApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/IMDbList/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<IMDbListData> 
     */
    open class func aPIIMDbListApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<IMDbListData> {
        var localVariablePath = "/API/IMDbList/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IMDbListData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path)  
     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIImagesApiKeyIdGet(id: String, apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImageData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIImagesApiKeyIdGetWithRequestBuilder(id: id, apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Images/{apiKey}/{id}
     - parameter id: (path)  
     - parameter apiKey: (path)  
     - returns: RequestBuilder<ImageData> 
     */
    open class func aPIImagesApiKeyIdGetWithRequestBuilder(id: String, apiKey: String) -> RequestBuilder<ImageData> {
        var localVariablePath = "/API/Images/{apiKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter options: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIImagesApiKeyIdOptionsGet(apiKey: String, id: String, options: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImageData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIImagesApiKeyIdOptionsGetWithRequestBuilder(apiKey: apiKey, id: id, options: options).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Images/{apiKey}/{id}/{options}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter options: (path)  
     - returns: RequestBuilder<ImageData> 
     */
    open class func aPIImagesApiKeyIdOptionsGetWithRequestBuilder(apiKey: String, id: String, options: String) -> RequestBuilder<ImageData> {
        var localVariablePath = "/API/Images/{apiKey}/{id}/{options}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let optionsPreEscape = "\(APIHelper.mapValueToPathItem(options))"
        let optionsPostEscape = optionsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{options}", with: optionsPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIInTheatersApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewMovieData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIInTheatersApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/InTheaters/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<NewMovieData> 
     */
    open class func aPIInTheatersApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<NewMovieData> {
        var localVariablePath = "/API/InTheaters/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewMovieData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIKeywordApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: KeywordData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIKeywordApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Keyword/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<KeywordData> 
     */
    open class func aPIKeywordApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<KeywordData> {
        var localVariablePath = "/API/Keyword/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KeywordData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIMetacriticReviewsApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MetacriticReviewData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIMetacriticReviewsApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/MetacriticReviews/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<MetacriticReviewData> 
     */
    open class func aPIMetacriticReviewsApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<MetacriticReviewData> {
        var localVariablePath = "/API/MetacriticReviews/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MetacriticReviewData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIMostPopularMoviesApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MostPopularData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIMostPopularMoviesApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/MostPopularMovies/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<MostPopularData> 
     */
    open class func aPIMostPopularMoviesApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<MostPopularData> {
        var localVariablePath = "/API/MostPopularMovies/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MostPopularData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIMostPopularTVsApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MostPopularData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIMostPopularTVsApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/MostPopularTVs/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<MostPopularData> 
     */
    open class func aPIMostPopularTVsApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<MostPopularData> {
        var localVariablePath = "/API/MostPopularTVs/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MostPopularData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPINameApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NameData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPINameApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Name/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<NameData> 
     */
    open class func aPINameApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<NameData> {
        var localVariablePath = "/API/Name/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NameData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPINameAwardsApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NameAwardData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPINameAwardsApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/NameAwards/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<NameAwardData> 
     */
    open class func aPINameAwardsApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<NameAwardData> {
        var localVariablePath = "/API/NameAwards/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NameAwardData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIPostersApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PosterData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIPostersApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Posters/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<PosterData> 
     */
    open class func aPIPostersApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<PosterData> {
        var localVariablePath = "/API/Posters/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PosterData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIRatingsApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RatingData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIRatingsApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Ratings/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<RatingData> 
     */
    open class func aPIRatingsApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<RatingData> {
        var localVariablePath = "/API/Ratings/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RatingData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIReviewsApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReviewData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIReviewsApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Reviews/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ReviewData> 
     */
    open class func aPIReviewsApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<ReviewData> {
        var localVariablePath = "/API/Reviews/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchAllApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchAllApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchAll/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchAllApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchAll/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Search/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/Search/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchCompanyApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchCompanyApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchCompany/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchCompanyApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchCompany/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchEpisodeApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchEpisodeApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchEpisode/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchEpisodeApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchEpisode/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchKeywordApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchKeywordApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchKeyword/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchKeywordApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchKeyword/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchMovieApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchMovieApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchMovie/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchMovieApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchMovie/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchNameApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchNameApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchName/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchNameApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchName/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchSeriesApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchSeriesApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchSeries/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchSeriesApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchSeries/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISearchTitleApiKeyExpressionGet(apiKey: String, expression: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISearchTitleApiKeyExpressionGetWithRequestBuilder(apiKey: apiKey, expression: expression).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SearchTitle/{apiKey}/{expression}
     - parameter apiKey: (path)  
     - parameter expression: (path)  
     - returns: RequestBuilder<SearchData> 
     */
    open class func aPISearchTitleApiKeyExpressionGetWithRequestBuilder(apiKey: String, expression: String) -> RequestBuilder<SearchData> {
        var localVariablePath = "/API/SearchTitle/{apiKey}/{expression}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let expressionPreEscape = "\(APIHelper.mapValueToPathItem(expression))"
        let expressionPostEscape = expressionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{expression}", with: expressionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter seasonNumber: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPISeasonEpisodesApiKeyIdSeasonNumberGet(apiKey: String, id: String, seasonNumber: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SeasonEpisodeData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPISeasonEpisodesApiKeyIdSeasonNumberGetWithRequestBuilder(apiKey: apiKey, id: id, seasonNumber: seasonNumber).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/SeasonEpisodes/{apiKey}/{id}/{seasonNumber}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter seasonNumber: (path)  
     - returns: RequestBuilder<SeasonEpisodeData> 
     */
    open class func aPISeasonEpisodesApiKeyIdSeasonNumberGetWithRequestBuilder(apiKey: String, id: String, seasonNumber: String) -> RequestBuilder<SeasonEpisodeData> {
        var localVariablePath = "/API/SeasonEpisodes/{apiKey}/{id}/{seasonNumber}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let seasonNumberPreEscape = "\(APIHelper.mapValueToPathItem(seasonNumber))"
        let seasonNumberPostEscape = seasonNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seasonNumber}", with: seasonNumberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeasonEpisodeData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPITop250MoviesApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Top250Data?, _ error: Error?) -> Void)) -> RequestTask {
        return aPITop250MoviesApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Top250Movies/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<Top250Data> 
     */
    open class func aPITop250MoviesApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<Top250Data> {
        var localVariablePath = "/API/Top250Movies/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Top250Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPITop250TVsApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Top250Data?, _ error: Error?) -> Void)) -> RequestTask {
        return aPITop250TVsApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Top250TVs/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<Top250Data> 
     */
    open class func aPITop250TVsApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<Top250Data> {
        var localVariablePath = "/API/Top250TVs/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Top250Data>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPITrailerApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrailerData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPITrailerApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Trailer/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<TrailerData> 
     */
    open class func aPITrailerApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<TrailerData> {
        var localVariablePath = "/API/Trailer/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrailerData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIUsageApiKeyGet(apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsageData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIUsageApiKeyGetWithRequestBuilder(apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/Usage/{apiKey}
     - parameter apiKey: (path)  
     - returns: RequestBuilder<UsageData> 
     */
    open class func aPIUsageApiKeyGetWithRequestBuilder(apiKey: String) -> RequestBuilder<UsageData> {
        var localVariablePath = "/API/Usage/{apiKey}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsageData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIUserRatingsApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserRatingData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIUserRatingsApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/UserRatings/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<UserRatingData> 
     */
    open class func aPIUserRatingsApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<UserRatingData> {
        var localVariablePath = "/API/UserRatings/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserRatingData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func aPIYouTubeTrailerApiKeyIdGet(apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: YouTubeTrailerData?, _ error: Error?) -> Void)) -> RequestTask {
        return aPIYouTubeTrailerApiKeyIdGetWithRequestBuilder(apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /API/YouTubeTrailer/{apiKey}/{id}
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<YouTubeTrailerData> 
     */
    open class func aPIYouTubeTrailerApiKeyIdGetWithRequestBuilder(apiKey: String, id: String) -> RequestBuilder<YouTubeTrailerData> {
        var localVariablePath = "/API/YouTubeTrailer/{apiKey}/{id}"
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<YouTubeTrailerData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter lang: (path)  
     - parameter id: (path)  
     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func langAPIReportApiKeyIdGet(lang: String, id: String, apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return langAPIReportApiKeyIdGetWithRequestBuilder(lang: lang, id: id, apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /{lang}/API/Report/{apiKey}/{id}
     - parameter lang: (path)  
     - parameter id: (path)  
     - parameter apiKey: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func langAPIReportApiKeyIdGetWithRequestBuilder(lang: String, id: String, apiKey: String) -> RequestBuilder<Void> {
        var localVariablePath = "/{lang}/API/Report/{apiKey}/{id}"
        let langPreEscape = "\(APIHelper.mapValueToPathItem(lang))"
        let langPostEscape = langPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lang}", with: langPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter lang: (path)  
     - parameter id: (path)  
     - parameter options: (path)  
     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func langAPIReportApiKeyIdOptionsGet(lang: String, id: String, options: String, apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return langAPIReportApiKeyIdOptionsGetWithRequestBuilder(lang: lang, id: id, options: options, apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /{lang}/API/Report/{apiKey}/{id}/{options}
     - parameter lang: (path)  
     - parameter id: (path)  
     - parameter options: (path)  
     - parameter apiKey: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func langAPIReportApiKeyIdOptionsGetWithRequestBuilder(lang: String, id: String, options: String, apiKey: String) -> RequestBuilder<Void> {
        var localVariablePath = "/{lang}/API/Report/{apiKey}/{id}/{options}"
        let langPreEscape = "\(APIHelper.mapValueToPathItem(lang))"
        let langPostEscape = langPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lang}", with: langPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let optionsPreEscape = "\(APIHelper.mapValueToPathItem(options))"
        let optionsPostEscape = optionsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{options}", with: optionsPostEscape, options: .literal, range: nil)
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter lang: (path)  
     - parameter id: (path)  
     - parameter apiKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func langAPITitleApiKeyIdGet(lang: String, id: String, apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TitleData?, _ error: Error?) -> Void)) -> RequestTask {
        return langAPITitleApiKeyIdGetWithRequestBuilder(lang: lang, id: id, apiKey: apiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /{lang}/API/Title/{apiKey}/{id}
     - parameter lang: (path)  
     - parameter id: (path)  
     - parameter apiKey: (path)  
     - returns: RequestBuilder<TitleData> 
     */
    open class func langAPITitleApiKeyIdGetWithRequestBuilder(lang: String, id: String, apiKey: String) -> RequestBuilder<TitleData> {
        var localVariablePath = "/{lang}/API/Title/{apiKey}/{id}"
        let langPreEscape = "\(APIHelper.mapValueToPathItem(lang))"
        let langPostEscape = langPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lang}", with: langPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TitleData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter lang: (path)  
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter options: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func langAPITitleApiKeyIdOptionsGet(lang: String, apiKey: String, id: String, options: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TitleData?, _ error: Error?) -> Void)) -> RequestTask {
        return langAPITitleApiKeyIdOptionsGetWithRequestBuilder(lang: lang, apiKey: apiKey, id: id, options: options).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /{lang}/API/Title/{apiKey}/{id}/{options}
     - parameter lang: (path)  
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter options: (path)  
     - returns: RequestBuilder<TitleData> 
     */
    open class func langAPITitleApiKeyIdOptionsGetWithRequestBuilder(lang: String, apiKey: String, id: String, options: String) -> RequestBuilder<TitleData> {
        var localVariablePath = "/{lang}/API/Title/{apiKey}/{id}/{options}"
        let langPreEscape = "\(APIHelper.mapValueToPathItem(lang))"
        let langPostEscape = langPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lang}", with: langPostEscape, options: .literal, range: nil)
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let optionsPreEscape = "\(APIHelper.mapValueToPathItem(options))"
        let optionsPostEscape = optionsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{options}", with: optionsPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TitleData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter lang: (path)  
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func langAPIWikipediaApiKeyIdGet(lang: String, apiKey: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WikipediaData?, _ error: Error?) -> Void)) -> RequestTask {
        return langAPIWikipediaApiKeyIdGetWithRequestBuilder(lang: lang, apiKey: apiKey, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /{lang}/API/Wikipedia/{apiKey}/{id}
     - parameter lang: (path)  
     - parameter apiKey: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<WikipediaData> 
     */
    open class func langAPIWikipediaApiKeyIdGetWithRequestBuilder(lang: String, apiKey: String, id: String) -> RequestBuilder<WikipediaData> {
        var localVariablePath = "/{lang}/API/Wikipedia/{apiKey}/{id}"
        let langPreEscape = "\(APIHelper.mapValueToPathItem(lang))"
        let langPostEscape = langPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lang}", with: langPostEscape, options: .literal, range: nil)
        let apiKeyPreEscape = "\(APIHelper.mapValueToPathItem(apiKey))"
        let apiKeyPostEscape = apiKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{apiKey}", with: apiKeyPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WikipediaData>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
