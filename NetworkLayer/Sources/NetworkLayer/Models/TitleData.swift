//
// TitleData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TitleData: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var title: String?
    public var originalTitle: String?
    public var fullTitle: String?
    public var type: String?
    public var year: String?
    public var image: String?
    public var releaseDate: String?
    public var runtimeMins: String?
    public var runtimeStr: String?
    public var plot: String?
    public var plotLocal: String?
    public var plotLocalIsRtl: Bool?
    public var awards: String?
    public var directors: String?
    public var directorList: [StarShort]?
    public var writers: String?
    public var writerList: [StarShort]?
    public var stars: String?
    public var starList: [StarShort]?
    public var actorList: [ActorShort]?
    public var fullCast: FullCastData?
    public var genres: String?
    public var genreList: [KeyValueItem]?
    public var companies: String?
    public var companyList: [CompanyShort]?
    public var countries: String?
    public var countryList: [KeyValueItem]?
    public var languages: String?
    public var languageList: [KeyValueItem]?
    public var contentRating: String?
    public var imDbRating: String?
    public var imDbRatingVotes: String?
    public var metacriticRating: String?
    public var ratings: RatingData?
    public var wikipedia: WikipediaData?
    public var posters: PosterData?
    public var images: ImageData?
    public var trailer: TrailerData?
    public var boxOffice: BoxOfficeShort?
    public var tagline: String?
    public var keywords: String?
    public var keywordList: [String]?
    public var similars: [SimilarShort]?
    public var tvSeriesInfo: TvSeriesInfo?
    public var tvEpisodeInfo: TvEpisodeInfo?
    public var errorMessage: String?

    public init(id: String? = nil, title: String? = nil, originalTitle: String? = nil, fullTitle: String? = nil, type: String? = nil, year: String? = nil, image: String? = nil, releaseDate: String? = nil, runtimeMins: String? = nil, runtimeStr: String? = nil, plot: String? = nil, plotLocal: String? = nil, plotLocalIsRtl: Bool? = nil, awards: String? = nil, directors: String? = nil, directorList: [StarShort]? = nil, writers: String? = nil, writerList: [StarShort]? = nil, stars: String? = nil, starList: [StarShort]? = nil, actorList: [ActorShort]? = nil, fullCast: FullCastData? = nil, genres: String? = nil, genreList: [KeyValueItem]? = nil, companies: String? = nil, companyList: [CompanyShort]? = nil, countries: String? = nil, countryList: [KeyValueItem]? = nil, languages: String? = nil, languageList: [KeyValueItem]? = nil, contentRating: String? = nil, imDbRating: String? = nil, imDbRatingVotes: String? = nil, metacriticRating: String? = nil, ratings: RatingData? = nil, wikipedia: WikipediaData? = nil, posters: PosterData? = nil, images: ImageData? = nil, trailer: TrailerData? = nil, boxOffice: BoxOfficeShort? = nil, tagline: String? = nil, keywords: String? = nil, keywordList: [String]? = nil, similars: [SimilarShort]? = nil, tvSeriesInfo: TvSeriesInfo? = nil, tvEpisodeInfo: TvEpisodeInfo? = nil, errorMessage: String? = nil) {
        self.id = id
        self.title = title
        self.originalTitle = originalTitle
        self.fullTitle = fullTitle
        self.type = type
        self.year = year
        self.image = image
        self.releaseDate = releaseDate
        self.runtimeMins = runtimeMins
        self.runtimeStr = runtimeStr
        self.plot = plot
        self.plotLocal = plotLocal
        self.plotLocalIsRtl = plotLocalIsRtl
        self.awards = awards
        self.directors = directors
        self.directorList = directorList
        self.writers = writers
        self.writerList = writerList
        self.stars = stars
        self.starList = starList
        self.actorList = actorList
        self.fullCast = fullCast
        self.genres = genres
        self.genreList = genreList
        self.companies = companies
        self.companyList = companyList
        self.countries = countries
        self.countryList = countryList
        self.languages = languages
        self.languageList = languageList
        self.contentRating = contentRating
        self.imDbRating = imDbRating
        self.imDbRatingVotes = imDbRatingVotes
        self.metacriticRating = metacriticRating
        self.ratings = ratings
        self.wikipedia = wikipedia
        self.posters = posters
        self.images = images
        self.trailer = trailer
        self.boxOffice = boxOffice
        self.tagline = tagline
        self.keywords = keywords
        self.keywordList = keywordList
        self.similars = similars
        self.tvSeriesInfo = tvSeriesInfo
        self.tvEpisodeInfo = tvEpisodeInfo
        self.errorMessage = errorMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case originalTitle
        case fullTitle
        case type
        case year
        case image
        case releaseDate
        case runtimeMins
        case runtimeStr
        case plot
        case plotLocal
        case plotLocalIsRtl
        case awards
        case directors
        case directorList
        case writers
        case writerList
        case stars
        case starList
        case actorList
        case fullCast
        case genres
        case genreList
        case companies
        case companyList
        case countries
        case countryList
        case languages
        case languageList
        case contentRating
        case imDbRating
        case imDbRatingVotes
        case metacriticRating
        case ratings
        case wikipedia
        case posters
        case images
        case trailer
        case boxOffice
        case tagline
        case keywords
        case keywordList
        case similars
        case tvSeriesInfo
        case tvEpisodeInfo
        case errorMessage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(originalTitle, forKey: .originalTitle)
        try container.encodeIfPresent(fullTitle, forKey: .fullTitle)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encodeIfPresent(runtimeMins, forKey: .runtimeMins)
        try container.encodeIfPresent(runtimeStr, forKey: .runtimeStr)
        try container.encodeIfPresent(plot, forKey: .plot)
        try container.encodeIfPresent(plotLocal, forKey: .plotLocal)
        try container.encodeIfPresent(plotLocalIsRtl, forKey: .plotLocalIsRtl)
        try container.encodeIfPresent(awards, forKey: .awards)
        try container.encodeIfPresent(directors, forKey: .directors)
        try container.encodeIfPresent(directorList, forKey: .directorList)
        try container.encodeIfPresent(writers, forKey: .writers)
        try container.encodeIfPresent(writerList, forKey: .writerList)
        try container.encodeIfPresent(stars, forKey: .stars)
        try container.encodeIfPresent(starList, forKey: .starList)
        try container.encodeIfPresent(actorList, forKey: .actorList)
        try container.encodeIfPresent(fullCast, forKey: .fullCast)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(genreList, forKey: .genreList)
        try container.encodeIfPresent(companies, forKey: .companies)
        try container.encodeIfPresent(companyList, forKey: .companyList)
        try container.encodeIfPresent(countries, forKey: .countries)
        try container.encodeIfPresent(countryList, forKey: .countryList)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(languageList, forKey: .languageList)
        try container.encodeIfPresent(contentRating, forKey: .contentRating)
        try container.encodeIfPresent(imDbRating, forKey: .imDbRating)
        try container.encodeIfPresent(imDbRatingVotes, forKey: .imDbRatingVotes)
        try container.encodeIfPresent(metacriticRating, forKey: .metacriticRating)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(wikipedia, forKey: .wikipedia)
        try container.encodeIfPresent(posters, forKey: .posters)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(trailer, forKey: .trailer)
        try container.encodeIfPresent(boxOffice, forKey: .boxOffice)
        try container.encodeIfPresent(tagline, forKey: .tagline)
        try container.encodeIfPresent(keywords, forKey: .keywords)
        try container.encodeIfPresent(keywordList, forKey: .keywordList)
        try container.encodeIfPresent(similars, forKey: .similars)
        try container.encodeIfPresent(tvSeriesInfo, forKey: .tvSeriesInfo)
        try container.encodeIfPresent(tvEpisodeInfo, forKey: .tvEpisodeInfo)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
    }
}

