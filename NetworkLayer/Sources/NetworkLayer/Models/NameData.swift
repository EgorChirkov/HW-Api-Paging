//
// NameData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NameData: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var name: String?
    public var role: String?
    public var image: String?
    public var summary: String?
    public var birthDate: String?
    public var deathDate: String?
    public var awards: String?
    public var height: String?
    public var knownFor: [KnownFor]?
    public var castMovies: [CastMovie]?
    public var errorMessage: String?

    public init(id: String? = nil, name: String? = nil, role: String? = nil, image: String? = nil, summary: String? = nil, birthDate: String? = nil, deathDate: String? = nil, awards: String? = nil, height: String? = nil, knownFor: [KnownFor]? = nil, castMovies: [CastMovie]? = nil, errorMessage: String? = nil) {
        self.id = id
        self.name = name
        self.role = role
        self.image = image
        self.summary = summary
        self.birthDate = birthDate
        self.deathDate = deathDate
        self.awards = awards
        self.height = height
        self.knownFor = knownFor
        self.castMovies = castMovies
        self.errorMessage = errorMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case role
        case image
        case summary
        case birthDate
        case deathDate
        case awards
        case height
        case knownFor
        case castMovies
        case errorMessage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(summary, forKey: .summary)
        try container.encodeIfPresent(birthDate, forKey: .birthDate)
        try container.encodeIfPresent(deathDate, forKey: .deathDate)
        try container.encodeIfPresent(awards, forKey: .awards)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(knownFor, forKey: .knownFor)
        try container.encodeIfPresent(castMovies, forKey: .castMovies)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
    }
}

