//
// BoxOfficeAllTimeDataDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BoxOfficeAllTimeDataDetail: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var rank: String?
    public var title: String?
    public var worldwideLifetimeGross: String?
    public var domesticLifetimeGross: String?
    public var domestic: String?
    public var foreignLifetimeGross: String?
    public var foreign: String?
    public var year: String?

    public init(id: String? = nil, rank: String? = nil, title: String? = nil, worldwideLifetimeGross: String? = nil, domesticLifetimeGross: String? = nil, domestic: String? = nil, foreignLifetimeGross: String? = nil, foreign: String? = nil, year: String? = nil) {
        self.id = id
        self.rank = rank
        self.title = title
        self.worldwideLifetimeGross = worldwideLifetimeGross
        self.domesticLifetimeGross = domesticLifetimeGross
        self.domestic = domestic
        self.foreignLifetimeGross = foreignLifetimeGross
        self.foreign = foreign
        self.year = year
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case rank
        case title
        case worldwideLifetimeGross
        case domesticLifetimeGross
        case domestic
        case foreignLifetimeGross
        case foreign
        case year
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(rank, forKey: .rank)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(worldwideLifetimeGross, forKey: .worldwideLifetimeGross)
        try container.encodeIfPresent(domesticLifetimeGross, forKey: .domesticLifetimeGross)
        try container.encodeIfPresent(domestic, forKey: .domestic)
        try container.encodeIfPresent(foreignLifetimeGross, forKey: .foreignLifetimeGross)
        try container.encodeIfPresent(foreign, forKey: .foreign)
        try container.encodeIfPresent(year, forKey: .year)
    }
}

