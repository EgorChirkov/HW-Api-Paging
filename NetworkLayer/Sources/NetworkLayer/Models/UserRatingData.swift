//
// UserRatingData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserRatingData: Codable, JSONEncodable, Hashable {

    public var imDbId: String?
    public var title: String?
    public var fullTitle: String?
    public var type: String?
    public var year: String?
    public var totalRating: String?
    public var totalRatingVotes: String?
    public var ratings: [UserRatingDataDetail]?
    public var demographicAll: UserRatingDataDemographic?
    public var demographicMales: UserRatingDataDemographic?
    public var demographicFemales: UserRatingDataDemographic?
    public var top1000Voters: UserRatingDataDemographicDetail?
    public var usUsers: UserRatingDataDemographicDetail?
    public var nonUSUsers: UserRatingDataDemographicDetail?
    public var errorMessage: String?

    public init(imDbId: String? = nil, title: String? = nil, fullTitle: String? = nil, type: String? = nil, year: String? = nil, totalRating: String? = nil, totalRatingVotes: String? = nil, ratings: [UserRatingDataDetail]? = nil, demographicAll: UserRatingDataDemographic? = nil, demographicMales: UserRatingDataDemographic? = nil, demographicFemales: UserRatingDataDemographic? = nil, top1000Voters: UserRatingDataDemographicDetail? = nil, usUsers: UserRatingDataDemographicDetail? = nil, nonUSUsers: UserRatingDataDemographicDetail? = nil, errorMessage: String? = nil) {
        self.imDbId = imDbId
        self.title = title
        self.fullTitle = fullTitle
        self.type = type
        self.year = year
        self.totalRating = totalRating
        self.totalRatingVotes = totalRatingVotes
        self.ratings = ratings
        self.demographicAll = demographicAll
        self.demographicMales = demographicMales
        self.demographicFemales = demographicFemales
        self.top1000Voters = top1000Voters
        self.usUsers = usUsers
        self.nonUSUsers = nonUSUsers
        self.errorMessage = errorMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imDbId
        case title
        case fullTitle
        case type
        case year
        case totalRating
        case totalRatingVotes
        case ratings
        case demographicAll
        case demographicMales
        case demographicFemales
        case top1000Voters
        case usUsers
        case nonUSUsers
        case errorMessage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imDbId, forKey: .imDbId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(fullTitle, forKey: .fullTitle)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(totalRating, forKey: .totalRating)
        try container.encodeIfPresent(totalRatingVotes, forKey: .totalRatingVotes)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(demographicAll, forKey: .demographicAll)
        try container.encodeIfPresent(demographicMales, forKey: .demographicMales)
        try container.encodeIfPresent(demographicFemales, forKey: .demographicFemales)
        try container.encodeIfPresent(top1000Voters, forKey: .top1000Voters)
        try container.encodeIfPresent(usUsers, forKey: .usUsers)
        try container.encodeIfPresent(nonUSUsers, forKey: .nonUSUsers)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
    }
}

