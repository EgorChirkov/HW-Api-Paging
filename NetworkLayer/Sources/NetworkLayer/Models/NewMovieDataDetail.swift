//
// NewMovieDataDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NewMovieDataDetail: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var title: String?
    public var fullTitle: String?
    public var year: String?
    public var releaseState: String?
    public var image: String?
    public var runtimeMins: String?
    public var runtimeStr: String?
    public var plot: String?
    public var contentRating: String?
    public var imDbRating: String?
    public var imDbRatingCount: String?
    public var metacriticRating: String?
    public var genres: String?
    public var genreList: [KeyValueItem]?
    public var directors: String?
    public var directorList: [StarShort]?
    public var stars: String?
    public var starList: [StarShort]?

    public init(id: String? = nil, title: String? = nil, fullTitle: String? = nil, year: String? = nil, releaseState: String? = nil, image: String? = nil, runtimeMins: String? = nil, runtimeStr: String? = nil, plot: String? = nil, contentRating: String? = nil, imDbRating: String? = nil, imDbRatingCount: String? = nil, metacriticRating: String? = nil, genres: String? = nil, genreList: [KeyValueItem]? = nil, directors: String? = nil, directorList: [StarShort]? = nil, stars: String? = nil, starList: [StarShort]? = nil) {
        self.id = id
        self.title = title
        self.fullTitle = fullTitle
        self.year = year
        self.releaseState = releaseState
        self.image = image
        self.runtimeMins = runtimeMins
        self.runtimeStr = runtimeStr
        self.plot = plot
        self.contentRating = contentRating
        self.imDbRating = imDbRating
        self.imDbRatingCount = imDbRatingCount
        self.metacriticRating = metacriticRating
        self.genres = genres
        self.genreList = genreList
        self.directors = directors
        self.directorList = directorList
        self.stars = stars
        self.starList = starList
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case fullTitle
        case year
        case releaseState
        case image
        case runtimeMins
        case runtimeStr
        case plot
        case contentRating
        case imDbRating
        case imDbRatingCount
        case metacriticRating
        case genres
        case genreList
        case directors
        case directorList
        case stars
        case starList
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(fullTitle, forKey: .fullTitle)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(releaseState, forKey: .releaseState)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(runtimeMins, forKey: .runtimeMins)
        try container.encodeIfPresent(runtimeStr, forKey: .runtimeStr)
        try container.encodeIfPresent(plot, forKey: .plot)
        try container.encodeIfPresent(contentRating, forKey: .contentRating)
        try container.encodeIfPresent(imDbRating, forKey: .imDbRating)
        try container.encodeIfPresent(imDbRatingCount, forKey: .imDbRatingCount)
        try container.encodeIfPresent(metacriticRating, forKey: .metacriticRating)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(genreList, forKey: .genreList)
        try container.encodeIfPresent(directors, forKey: .directors)
        try container.encodeIfPresent(directorList, forKey: .directorList)
        try container.encodeIfPresent(stars, forKey: .stars)
        try container.encodeIfPresent(starList, forKey: .starList)
    }
}

