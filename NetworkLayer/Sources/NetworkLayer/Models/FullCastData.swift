//
// FullCastData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FullCastData: Codable, JSONEncodable, Hashable {

    public var imDbId: String?
    public var title: String?
    public var fullTitle: String?
    public var type: String?
    public var year: String?
    public var directors: CastShort?
    public var writers: CastShort?
    public var actors: [ActorShort]?
    public var others: [CastShort]?
    public var errorMessage: String?

    public init(imDbId: String? = nil, title: String? = nil, fullTitle: String? = nil, type: String? = nil, year: String? = nil, directors: CastShort? = nil, writers: CastShort? = nil, actors: [ActorShort]? = nil, others: [CastShort]? = nil, errorMessage: String? = nil) {
        self.imDbId = imDbId
        self.title = title
        self.fullTitle = fullTitle
        self.type = type
        self.year = year
        self.directors = directors
        self.writers = writers
        self.actors = actors
        self.others = others
        self.errorMessage = errorMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imDbId
        case title
        case fullTitle
        case type
        case year
        case directors
        case writers
        case actors
        case others
        case errorMessage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imDbId, forKey: .imDbId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(fullTitle, forKey: .fullTitle)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(directors, forKey: .directors)
        try container.encodeIfPresent(writers, forKey: .writers)
        try container.encodeIfPresent(actors, forKey: .actors)
        try container.encodeIfPresent(others, forKey: .others)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
    }
}

