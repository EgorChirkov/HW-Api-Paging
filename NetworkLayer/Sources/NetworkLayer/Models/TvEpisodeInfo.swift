//
// TvEpisodeInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TvEpisodeInfo: Codable, JSONEncodable, Hashable {

    public var seriesId: String?
    public var seriesTitle: String?
    public var seriesFullTitle: String?
    public var seriesYear: String?
    public var seriesYearEnd: String?
    public var seasonNumber: String?
    public var episodeNumber: String?
    public var previousEpisodeId: String?
    public var nextEpisodeId: String?

    public init(seriesId: String? = nil, seriesTitle: String? = nil, seriesFullTitle: String? = nil, seriesYear: String? = nil, seriesYearEnd: String? = nil, seasonNumber: String? = nil, episodeNumber: String? = nil, previousEpisodeId: String? = nil, nextEpisodeId: String? = nil) {
        self.seriesId = seriesId
        self.seriesTitle = seriesTitle
        self.seriesFullTitle = seriesFullTitle
        self.seriesYear = seriesYear
        self.seriesYearEnd = seriesYearEnd
        self.seasonNumber = seasonNumber
        self.episodeNumber = episodeNumber
        self.previousEpisodeId = previousEpisodeId
        self.nextEpisodeId = nextEpisodeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case seriesId
        case seriesTitle
        case seriesFullTitle
        case seriesYear
        case seriesYearEnd
        case seasonNumber
        case episodeNumber
        case previousEpisodeId
        case nextEpisodeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(seriesId, forKey: .seriesId)
        try container.encodeIfPresent(seriesTitle, forKey: .seriesTitle)
        try container.encodeIfPresent(seriesFullTitle, forKey: .seriesFullTitle)
        try container.encodeIfPresent(seriesYear, forKey: .seriesYear)
        try container.encodeIfPresent(seriesYearEnd, forKey: .seriesYearEnd)
        try container.encodeIfPresent(seasonNumber, forKey: .seasonNumber)
        try container.encodeIfPresent(episodeNumber, forKey: .episodeNumber)
        try container.encodeIfPresent(previousEpisodeId, forKey: .previousEpisodeId)
        try container.encodeIfPresent(nextEpisodeId, forKey: .nextEpisodeId)
    }
}

